---
AWSTemplateFormatVersion: 2010-09-09
Description: Fargate

Parameters:
  # Environment
  EnvironmentName:
    Type: String
    Description: Environment name - dev or prod
    Default: dev
    AllowedValues:
      - dev
      - prod
    ConstraintDescription: Specify either dev or prod
  NetworkStackName:
    Type: String
    Description: Name of an active CloudFormation stack that contains networking resources
    MinLength: 1
    MaxLength: 255
    AllowedPattern: "^[a-zA-Z][-a-zA-Z0-9]*$"
  AlbStackName:
    Type: String
    Description: Name of an active CloudFormation stack that contains ALB resources
    MinLength: 1
    MaxLength: 255
    AllowedPattern: "^[a-zA-Z][-a-zA-Z0-9]*$"
  RdsStackName:
    Type: String
    Description: Name of an optional active CloudFormation stack that contains RDS resources
    MinLength: 1
    MaxLength: 255
    AllowedPattern: "^[a-zA-Z][-a-zA-Z0-9]*$"
  SecretsManagerStackName:
    Type: String
    Description: Name of an optional active CloudFormation stack that contains secrets manager resources
    MinLength: 1
    MaxLength: 255
    AllowedPattern: "^[a-zA-Z][-a-zA-Z0-9]*$"
  SecurityGroupStackName:
    Type: String
    Description: Name of an optional active CloudFormation stack that contains secrets manager resources
    MinLength: 1
    MaxLength: 255
    AllowedPattern: "^[a-zA-Z][-a-zA-Z0-9]*$"
  EcrReposStackName:
    Type: String
    Description: ECR repository stack name
    MinLength: 1
    MaxLength: 255
    AllowedPattern: "^[a-zA-Z][-a-zA-Z0-9]*$"

  # Application globals
  AppProtocol:
    Type: String
    Description: The application server protocol
    Default: HTTP
    AllowedValues:
      - HTTP
      - HTTPS
    ConstraintDescription: Specify either HTTTP or HTTPS
  AppIngressPort:
    Description: The application ingress port used by security groups
    Type: Number
    MinValue: 0
    MaxValue: 65535
    ConstraintDescription: TCP ports must be between 0 - 65535
    Default: 80

  # ECS Task definition
  DockerImageTag:
    Type: String
    Description: The tag of docker image.
    Default: latest
  ContainerCpu:
    Type: Number
    Description: "Amount of CPU for the container - options available: https://aws.amazon.com/fargate/pricing/"
    Default: 256
    MinValue: 256
    MaxValue: 4096
    ConstraintDescription: "Value must be between 256 and 4096 - see: https://docs.aws.amazon.com/AmazonECS/latest/developerguide/task_definition_parameters.html#task_size"
  ContainerMemory:
    Type: Number
    Description: "Amount of memory for the container - options available: https://aws.amazon.com/fargate/pricing/"
    Default: 512
    MinValue: 512
    MaxValue: 30720
    ConstraintDescription: "Value must be between 512 and 30720 - see: https://aws.amazon.com/fargate/pricing/"
  ContainerLogRetentionInDays:
    Type: Number
    Default: 7

  # ALB target group
  LBListenerPriority:
    Type: Number
    Description: The service load balancer listener priority
    Default: 2
    MinValue: 2
    MaxValue: 50000
    ConstraintDescription: Number must be between 1 and 50,000
  HealthCheckPath:
    Type: String
    Description: The path for the Application Load Balancer health check
    Default: /api/health
    MinLength: 1
    MaxLength: 255
    ConstraintDescription: Value must be between 1 and 255 characters

  # ECS auto scaling
  ServiceScaleEvaluationPeriods:
    Description: The number of periods over which data is compared to the specified threshold
    Type: Number
    Default: 2
    MinValue: 2
  ServiceCpuScaleOutThreshold:
    Type: Number
    Description: Average CPU value to trigger auto scaling out
    Default: 50
    MinValue: 0
    MaxValue: 100
    ConstraintDescription: Value must be between 0 and 100
  ServiceCpuScaleInThreshold:
    Type: Number
    Description: Average CPU value to trigger auto scaling in
    Default: 25
    MinValue: 0
    MaxValue: 100
    ConstraintDescription: Value must be between 0 and 100
  TaskMinContainerCount:
    Type: Number
    Description: Minimum number of containers to run for the service
    Default: 1
    MinValue: 1
    ConstraintDescription: Value must be at least one
  TaskMaxContainerCount:
    Type: Number
    Description: Maximum number of containers to run for the service when auto scaling out
    Default: 2
    MinValue: 1
    ConstraintDescription: Value must be at least one

Conditions:
  IsProd: !Equals [ !Ref EnvironmentName, prod ]

Resources:
  #----------------------------------------------
  # ECS cluster
  #----------------------------------------------
  EcsCluster:
    Type: AWS::ECS::Cluster
    Properties:
      ClusterName: !Ref AWS::StackName

  #----------------------------------------------
  # ECS task definition
  #----------------------------------------------
  TaskDefinition:
    Type: AWS::ECS::TaskDefinition
    Properties:
      Family: !Ref AWS::StackName
      RequiresCompatibilities:
        - FARGATE
      Cpu: !Ref ContainerCpu
      Memory: !Ref ContainerMemory
      NetworkMode: awsvpc
      ExecutionRoleArn: !GetAtt TaskExecutionRole.Arn
      ContainerDefinitions:
        - Name: !Sub ${AWS::StackName}-${EnvironmentName}
          Image: !Sub
            - ${DockerRepositoryUri}:${DockerImageTag}
            - DockerRepositoryUri:
                Fn::ImportValue: !Sub ${EcrReposStackName}-EcrDockerRepositoryUri
              DockerImageTag: !Ref DockerImageTag
          Essential: true
          PortMappings:
            - ContainerPort: !Ref AppIngressPort
          Secrets:
            - Name: APP_KEY
              ValueFrom:
                Fn::ImportValue: !Sub ${SecretsManagerStackName}-AppKeyArn
            - Name: DB_DATABASE
              ValueFrom:
                Fn::ImportValue: !Sub ${SecretsManagerStackName}-DatabaseNameArn
            - Name: DB_USERNAME
              ValueFrom:
                Fn::ImportValue: !Sub ${SecretsManagerStackName}-DatabaseUserNameArn
            - Name: DB_PASSWORD
              ValueFrom:
                Fn::ImportValue: !Sub ${SecretsManagerStackName}-DatabasePasswordArn
          Environment:
            - Name: ENVIRONMENT_NAME
              Value: !Ref EnvironmentName
            - Name: APP_NAME
              Value: ReservationSystemStudies
            - Name: APP_ENV
              Value: !If [ IsProd, "production", "development" ]
            - Name: APP_DEBUG
              Value: !If [ IsProd, true, false ]
            - Name: APP_URL
              Value: !Sub
                - https://${DomainName}
                - DomainName:
                    Fn::ImportValue: !Sub '${AlbStackName}-ApplicationLoadBalancerDnsName'
            - Name: DB_CONNECTION
              Value:
                Fn::ImportValue: !Sub "${RdsStackName}-DatabaseEngine"
            - Name: DB_HOST
              Value:
                Fn::ImportValue: !Sub "${RdsStackName}-DatabaseURL"
            - Name: DB_PORT
              Value:
                Fn::ImportValue: !Sub "${RdsStackName}-DatabasePort"
            - Name: BROADCAST_DRIVER
              Value: log
          LogConfiguration:
            LogDriver: awslogs
            Options:
              awslogs-region: !Ref AWS::Region
              awslogs-group: !Ref TaskLogGroup
              awslogs-stream-prefix: !Ref AWS::StackName

  TaskLogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: !Sub /fargate/${AWS::StackName}/${EnvironmentName}
      RetentionInDays: !Ref ContainerLogRetentionInDays

  TaskExecutionRole:
    Type: AWS::IAM::Role
    Properties:
      Path: /
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Principal:
              Service: ecs-tasks.amazonaws.com
            Action: sts:AssumeRole
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AmazonECSTaskExecutionRolePolicy
        - !Ref SecretsAccessPolicy

  SecretsAccessPolicy:
    Type: AWS::IAM::ManagedPolicy
    Properties:
      Description: Policy to access secrets
      Path: /
      PolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Action: secretsmanager:GetSecretValue
            Resource:
              - !Sub arn:aws:secretsmanager:${AWS::Region}:${AWS::AccountId}:secret:dev/ReservationSystemStudies/*
              - !Sub arn:aws:secretsmanager:${AWS::Region}:${AWS::AccountId}:secret:prod/ReservationSystemStudies/*

  #----------------------------------------------
  # ECS service
  #----------------------------------------------
  FargateService:
    Type: AWS::ECS::Service
    Properties:
      Cluster: !Ref EcsCluster
      ServiceName: !Ref AWS::StackName
      DesiredCount: !Ref TaskMinContainerCount
      LaunchType: FARGATE
      TaskDefinition: !Ref TaskDefinition
      LoadBalancers:
        - ContainerName: !Sub ${AWS::StackName}-${EnvironmentName}
          ContainerPort: !Ref AppIngressPort
          TargetGroupArn: !Ref TargetGroup
      NetworkConfiguration:
        AwsvpcConfiguration:
          AssignPublicIp: DISABLED
          SecurityGroups:
            - Fn::ImportValue: !Sub ${SecurityGroupStackName}-AppSecurityGroupID
          Subnets:
            - Fn::ImportValue: !Sub ${NetworkStackName}-PrivateSubnet1ID
            - Fn::ImportValue: !Sub ${NetworkStackName}-PrivateSubnet2ID

  #----------------------------------------------
  # ECS auto scaling
  #----------------------------------------------
  ServiceScalingTarget:
    Type: AWS::ApplicationAutoScaling::ScalableTarget
    Properties:
      MinCapacity: !Ref TaskMinContainerCount
      MaxCapacity: !Ref TaskMaxContainerCount
      ResourceId: !Sub
        - service/${EcsClusterName}/${EcsServiceName}
        - EcsClusterName: !Ref EcsCluster
          EcsServiceName: !GetAtt FargateService.Name
      RoleARN: !GetAtt ServiceAutoScalingRole.Arn
      ScalableDimension: ecs:service:DesiredCount
      ServiceNamespace: ecs

  ServiceScaleOutPolicy:
    Type: AWS::ApplicationAutoScaling::ScalingPolicy
    Properties:
      PolicyName: ScaleOutPolicy
      PolicyType: StepScaling
      ScalingTargetId: !Ref ServiceScalingTarget
      StepScalingPolicyConfiguration:
        AdjustmentType: ChangeInCapacity
        Cooldown: 60
        MetricAggregationType: Average
        StepAdjustments:
          - ScalingAdjustment: 1
            MetricIntervalLowerBound: 0

  ServiceScaleInPolicy:
    Type: AWS::ApplicationAutoScaling::ScalingPolicy
    Properties:
      PolicyName: ScaleInPolicy
      PolicyType: StepScaling
      ScalingTargetId: !Ref ServiceScalingTarget
      StepScalingPolicyConfiguration:
        AdjustmentType: ChangeInCapacity
        Cooldown: 60
        MetricAggregationType: Average
        StepAdjustments:
          - ScalingAdjustment: -1
            MetricIntervalUpperBound: 0

  ServiceScaleOutAlarm:
    Type: AWS::CloudWatch::Alarm
    Properties:
      EvaluationPeriods: !Ref ServiceScaleEvaluationPeriods
      Statistic: Average
      TreatMissingData: notBreaching
      Threshold: !Ref ServiceCpuScaleOutThreshold
      AlarmDescription: Alarm to add capacity if CPU is high
      Period: 60
      AlarmActions:
        - !Ref ServiceScaleOutPolicy
      Namespace: AWS/ECS
      Dimensions:
        - Name: ClusterName
          Value: !Ref EcsCluster
        - Name: ServiceName
          Value: !GetAtt FargateService.Name
      ComparisonOperator: GreaterThanThreshold
      MetricName: CPUUtilization

  ServiceScaleInAlarm:
    Type: AWS::CloudWatch::Alarm
    Properties:
      EvaluationPeriods: !Ref ServiceScaleEvaluationPeriods
      Statistic: Average
      TreatMissingData: notBreaching
      Threshold: !Ref ServiceCpuScaleInThreshold
      AlarmDescription: Alarm to reduce capacity if container CPU is low
      Period: 300
      AlarmActions:
        - !Ref ServiceScaleInPolicy
      Namespace: AWS/ECS
      Dimensions:
        - Name: ClusterName
          Value: !Ref EcsCluster
        - Name: ServiceName
          Value: !GetAtt FargateService.Name
      ComparisonOperator: LessThanThreshold
      MetricName: CPUUtilization

  ServiceAutoScalingRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Statement:
          - Effect: Allow
            Principal:
              Service: application-autoscaling.amazonaws.com
            Action: sts:AssumeRole
      Path: /
      Policies:
        - PolicyName: service-autoscaling
          PolicyDocument:
            Statement:
              - Effect: Allow
                Action:
                  - application-autoscaling:*
                  - cloudwatch:DescribeAlarms
                  - cloudwatch:PutMetricAlarm
                  - ecs:DescribeServices
                  - ecs:UpdateService
                Resource: '*'

  #----------------------------------------------
  # ALB target group
  #----------------------------------------------
  TargetGroup:
    Type: AWS::ElasticLoadBalancingV2::TargetGroup
    Properties:
      VpcId:
        Fn::ImportValue: !Sub ${NetworkStackName}-VpcID
      Port: !Ref AppIngressPort
      Protocol: !Ref AppProtocol
      Matcher:
        HttpCode: 200
      HealthCheckIntervalSeconds: 60
      HealthCheckPath: !Ref HealthCheckPath
      HealthCheckProtocol: !Ref AppProtocol
      HealthCheckTimeoutSeconds: 30
      HealthyThresholdCount: 2
      TargetGroupAttributes:
      - Key: deregistration_delay.timeout_seconds
        Value: 300
      TargetType: ip
      Tags:
      - Key: Stack
        Value: !Ref AWS::StackName
      - Key: Environment
        Value: !Ref EnvironmentName

  ListenerRule:
    Type: AWS::ElasticLoadBalancingV2::ListenerRule
    Properties:
      ListenerArn:
        Fn::ImportValue: !Sub ${AlbStackName}-ApplicationLoadBalancerListenerArn
      Priority: !Ref LBListenerPriority
      Conditions:
        - Field: host-header
          Values:
            - Fn::ImportValue: !Sub ${AlbStackName}-ApplicationLoadBalancerDnsName
      Actions:
        - TargetGroupArn: !Ref TargetGroup
          Type: forward

Outputs:
  Name:
    Description: Fargate Stack Name
    Value: !Ref AWS::StackName
    Export:
      Name: !Sub ${AWS::StackName}-Name

  EnvironmentName:
    Description: Environment Name
    Value: !Ref EnvironmentName
    Export:
      Name: !Sub ${AWS::StackName}-EnvironmentName

  EcsTaskDefinition:
    Value: !Ref TaskDefinition
    Export:
      Name: !Sub ${AWS::StackName}-TaskDefinition

  FargateServiceArn:
    Value: !Ref FargateService
    Export:
      Name: !Sub ${AWS::StackName}-FargateServiceArn

  FargateServiceName:
    Value: !GetAtt FargateService.Name
    Export:
      Name: !Sub ${AWS::StackName}-FargateServiceName
