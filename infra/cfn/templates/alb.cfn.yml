---
AWSTemplateFormatVersion: 2010-09-09
Description: Application load balancer

Parameters:
  EnvironmentName:
    Type: String
    Description: Environment name - dev or prod
    Default: dev
    AllowedValues:
      - dev
      - prod
    ConstraintDescription: Specify either dev or prod

  NetworkStackName:
    Type: String
    Description: Name of an active CloudFormation stack that contains networking resources
    MinLength: 1
    MaxLength: 255
    AllowedPattern: "^[a-zA-Z][-a-zA-Z0-9]*$"

  SSLCertificateArn:
    Type: String
    Description: The SSL/TLS certificate ARN
    MinLength: 0
    MaxLength: 2048
    Default: ""

  SecurityGroups:
    Type: List<AWS::EC2::SecurityGroup::Id>
    Description: "List of Security groups"

  HostedZoneName:
    Type: String
    Description: The Amazon Route 53 Hosted Zone Name for the optional load balancer alias record - do not include a period at the end
    Default: ""
    AllowedPattern: "(^$|^((?!-)[A-Za-z0-9-]{1,63}(?<!-)\\.)+[A-Za-z]{2,6}$)" # Allow for a blank or a domain name
    ConstraintDescription: Please enter a valid Route 53 Hosted Zone Name

  LoadBalancerDomainName:
    Type: String
    Description: Domain name to create an Amazon Route 53 alias record for the load balancer
    Default: ""
    AllowedPattern: "(^$|^((?!-)[A-Za-z0-9-]{1,63}(?<!-)\\.)+[A-Za-z]{2,6}$)" # Allow for a blank or a domain name
    ConstraintDescription: Please enter a valid domain name

Conditions:
  IsTlsEnabled: !Not [ !Equals [ !Ref SSLCertificateArn, "" ] ]

  CreateRoute53Record: !And
    - !Not [ !Equals [ !Ref LoadBalancerDomainName, "" ] ]
    - !Not [ !Equals [ !Ref HostedZoneName, "" ] ]

Resources:
  ApplicationLoadBalancer:
    Type: AWS::ElasticLoadBalancingV2::LoadBalancer
    Properties:
      Subnets:
        - Fn::ImportValue: !Sub ${NetworkStackName}-PublicSubnet1ID
        - Fn::ImportValue: !Sub ${NetworkStackName}-PublicSubnet2ID
      SecurityGroups: !Ref SecurityGroups
      Tags:
      - Key: Stack
        Value: !Ref AWS::StackName
      - Key: Environment
        Value: !Ref EnvironmentName

  LoadBalancerListener:
    Type: AWS::ElasticLoadBalancingV2::Listener
    Properties:
      LoadBalancerArn: !Ref ApplicationLoadBalancer
      Port:
        Fn::ImportValue: !Sub ${NetworkStackName}-ELBIngressPort
      Protocol: !If [ IsTlsEnabled, HTTPS, HTTP ]
      Certificates:
        - CertificateArn: !If [ IsTlsEnabled, !Ref SSLCertificateArn, !Ref "AWS::NoValue" ]
      DefaultActions:
      - Type: fixed-response
        FixedResponseConfig:
          ContentType: text/html
          MessageBody: "404 Not Found"
          StatusCode: 404

  AlbRoute53Record:
    Type: AWS::Route53::RecordSet
    Condition: CreateRoute53Record
    Properties:
      Name: !Ref LoadBalancerDomainName
      HostedZoneName: !Sub ${HostedZoneName}.
      Type: A
      AliasTarget:
        HostedZoneId: !GetAtt ApplicationLoadBalancer.CanonicalHostedZoneID
        DNSName: !GetAtt ApplicationLoadBalancer.DNSName

Outputs:
  Name:
    Description: ALB Stack Name
    Value: !Ref AWS::StackName
    Export:
      Name: !Sub ${AWS::StackName}-Name

  EnvironmentName:
    Description: Environment Name
    Value: !Ref EnvironmentName
    Export:
      Name: !Sub ${AWS::StackName}-EnvironmentName

  ApplicationLoadBalancerArn:
    Value: !Ref ApplicationLoadBalancer
    Export:
      Name: !Sub ${AWS::StackName}-ApplicationLoadBalancerArn

  ApplicationLoadBalancerDnsName:
    Value: !If [ CreateRoute53Record, !Ref LoadBalancerDomainName, !GetAtt ApplicationLoadBalancer.DNSName ]
    Export:
      Name: !Sub ${AWS::StackName}-ApplicationLoadBalancerDnsName

  ApplicationLoadBalancerBaseDnsName:
    Value: !GetAtt ApplicationLoadBalancer.DNSName
    Export:
      Name: !Sub ${AWS::StackName}-ApplicationLoadBalancerBaseDnsName

  ApplicationLoadBalancerCanonicalHostedZoneId:
    Value: !GetAtt ApplicationLoadBalancer.CanonicalHostedZoneID
    Export:
      Name: !Sub ${AWS::StackName}-ApplicationLoadBalancerCanonicalHostedZoneId

  ApplicationLoadBalancerName:
    Value: !GetAtt ApplicationLoadBalancer.LoadBalancerName
    Export:
      Name: !Sub ${AWS::StackName}-ApplicationLoadBalancerName

  ApplicationLoadBalancerListenerArn:
    Value: !Ref LoadBalancerListener
    Export:
      Name: !Sub ${AWS::StackName}-ApplicationLoadBalancerListenerArn
