name: deploy_service
on:
  push:
    branches-ignore:
      - '**'
    tags:
      - 'v*'
jobs:
  build-image:
    runs-on: ubuntu-latest
    outputs:
      image: ${{ secrets.ECR_REGISTRY }}/${{ secrets.ECR_REPOSITORY_NAME }}:${{ steps.meta.outputs.tags }}
      tags: ${{ steps.meta.outputs.tags }}
    steps:
    - name: Checkout
      uses: actions/checkout@2541b1294d2704b0964813337f33b291d3f8596b
    - name: Set up QEMU
      uses: docker/setup-qemu-action@8b122486cedac8393e77aa9734c3528886e4a1a8
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@dc7b9719a96d48369863986a06765841d7ea23f6
    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@05b148adc31e091bafbaf404f745055d4d3bc9d2
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ secrets.AWS_REGION }}
    - name: Login to ECR
      uses: docker/login-action@49ed152c8eca782a232dede0303416e8f356c37b
      with:
        registry: ${{ secrets.ECR_REGISTRY }}
    - name: Docker meta
      id: meta
      uses: docker/metadata-action@69f6fc9d46f2f8bf0d5491e4aabe0bb8c6a4678a
      with:
        images: ${{ secrets.ECR_REGISTRY }}/${{ secrets.ECR_REPOSITORY_NAME }}
        flavor: latest=auto
        tags: type=semver,pattern={{version}}
    - name: Build & Push
      uses: docker/build-push-action@e551b19e49efd4e98792db7592c17c09b89db8d8
      with:
        context: .
        file: ./infra/docker/prod/Dockerfile
        build-args: |
          WWWGROUP=${{ secrets.WWWGROUP }}
        platforms: linux/amd64,linux/arm64
        push: true
        tags: ${{ steps.meta.outputs.tags }}
        labels: ${{ steps.meta.outputs.labels }}

  deploy:
    runs-on: ubuntu-latest
    needs:
    - build-image
    steps:
    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@05b148adc31e091bafbaf404f745055d4d3bc9d2
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ secrets.AWS_REGION }}
    - name: Download task definition
      run: |
        aws ecs describe-task-definition --task-definition ${{ secrets.ECS_TASK_APP_FAMILY }} --query taskDefinition | jq -r 'del(
          .taskDefinitionArn,
          .requiresAttributes,
          .compatibilities,
          .revision,
          .status,
          .registeredAt,
          .registeredBy
        )' > /tmp/task-definition.json
    - name: Fill in the new image ID in the Amazon ECS task definition
      uses: aws-actions/amazon-ecs-render-task-definition@374ee96751fffe528c09b5f427848da60469bb55
      id: task-def
      with:
        task-definition: /tmp/task-definition.json
        container-name: ${{ secrets.ECS_TASK_APP_CONTAINER_NAME }}
        image: ${{ needs.build-image.outputs.image }}
    - name: Deploy Amazon ECS task definition
      uses: aws-actions/amazon-ecs-deploy-task-definition@9c18d81893224634ac107b91720119c91c1d600e
      with:
        task-definition: ${{ steps.task-def.outputs.task-definition }}
        service: ${{ env.ECS_SERVICE_NAME }}
        cluster: ${{ env.ECS_CLUSTER_NAME }}
        wait-for-service-stability: true
